#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using new-cons-zombies.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it concolic-hop/strategy-queue concolic-hop/complex)
(define-lump
 L
 (0 'dead)
 (1 'dist)
 (2 'draw-on)
 (3 'draw-on/color)
 (4 'draw-on/image)
 (5 'eat-brains)
 (6 'kill-all)
 (7 'move-toward)
 (8 'move-toward/speed)
 (9 'posn)
 (10 'touching?)
 (11 'undead)
 (12 'x)
 (13 'y))
(define-concolic-test
 new-cons-zombies
 #:inputs
 (|M(image empty-scene (->s (list/s integer integer integer integer) (list/s integer integer integer integer) (struct/s _image any/s)) (-> number? number? image?))|
  (->s
   (list/s integer integer integer integer)
   (->s
    (list/s integer integer integer integer)
    (list/s
     integer
     (or/s
      (->s
       (list/s integer integer integer integer)
       (list/s integer integer integer integer))
      (list/s integer integer integer integer)
      boolean)))))
 (|M(image place-image (->s (struct/s _image any/s) (list/s integer integer integer integer) (list/s integer integer integer integer) (struct/s _image any/s) (struct/s _image any/s)) (-> image? number? number? image? image?))|
  (->s
   (list/s
    integer
    (or/s
     (->s
      (list/s integer integer integer integer)
      (list/s integer integer integer integer))
     (list/s integer integer integer integer)
     boolean))
   (->s
    (list/s integer integer integer integer)
    (->s
     (list/s integer integer integer integer)
     (->s
      (list/s
       integer
       (or/s
        (->s
         (list/s integer integer integer integer)
         (list/s integer integer integer integer))
        (list/s integer integer integer integer)
        boolean))
      (list/s
       integer
       (or/s
        (->s
         (list/s integer integer integer integer)
         (list/s integer integer integer integer))
        (list/s integer integer integer integer)
        boolean)))))))
 (|M(image circle (->s (list/s integer integer integer integer) string/s string/s (struct/s _image any/s)) (-> number? string? string? image?))|
  (->s
   (list/s integer integer integer integer)
   (->s
    integer
    (->s
     integer
     (list/s
      integer
      (or/s
       (->s
        (list/s integer integer integer integer)
        (list/s integer integer integer integer))
       (list/s integer integer integer integer)
       boolean))))))
 (|M(math sqrt (->s (list/s integer integer integer integer) (list/s integer integer integer integer)) (-> number? number?))|
  (->s
   (list/s integer integer integer integer)
   (list/s integer integer integer integer)))
 (|â€¢(0 (->s (->s (->si ((msg (one-of/c (quote posn) (quote draw-on/color) (quote touching?) (quote move-toward)))) (res (msg) (cond ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote posn) (quote draw-on/color) (quote touching?) (quote move-toward)))) (res (msg) (cond ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote posn) (quote draw-on/color) (quote touching?) (quote move-toward)))) (res (msg) (cond ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) (else "error")))))) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote undead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) ((equal? msg (quote eat-brains)) (->s (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote undead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) ((equal? msg (quote eat-brains)) (->s (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) (else "error"))))) dont-care/s) (-> (-> zombie/c zombies/c zombies/c) dont-care/c))|
  (->s
   (->s
    (list/s
     (->s
      integer
      (->s
       (list/s
        integer
        (or/s
         (->s
          (list/s integer integer integer integer)
          (list/s integer integer integer integer))
         (list/s integer integer integer integer)
         boolean))
       (list/s
        integer
        (or/s
         (->s
          (list/s integer integer integer integer)
          (list/s integer integer integer integer))
         (list/s integer integer integer integer)
         boolean))))
     (->s
      (list/s
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (list/s integer integer integer integer))
       (->s
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))))
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (->s
         (list/s integer integer integer integer)
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))))
       (->s
        integer
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer))))
       (->s integer (list/s integer integer integer integer))
       (->s integer (list/s integer integer integer integer)))
      (list/s
       (->s
        integer
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))))
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (list/s
         (->s
          integer
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean boolean)
         (->s integer boolean)
         (->s boolean boolean)))
       (->s
        integer
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer))))
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        boolean)))
     (->s
      integer
      (list/s
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (list/s integer integer integer integer))
       (->s
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))))
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (->s
         (list/s integer integer integer integer)
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))))
       (->s
        integer
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer))))
       (->s integer (list/s integer integer integer integer))
       (->s integer (list/s integer integer integer integer))))
     (->s
      (list/s
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (list/s integer integer integer integer))
       (->s
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))))
       (->s
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer)))
        (->s
         (list/s integer integer integer integer)
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))))
       (->s
        integer
        (list/s
         (->s boolean (list/s integer integer integer integer))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))))
         (->s boolean (->s (list/s integer integer integer integer) boolean))
         (->s integer boolean)
         (->s integer (list/s integer integer integer integer))
         (->s integer (list/s integer integer integer integer))))
       (->s integer (list/s integer integer integer integer))
       (->s integer (list/s integer integer integer integer)))
      boolean))
    (->s
     (list/s
      (->s
       integer
       (->s
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))))
      (->s
       (list/s
        (->s
         integer
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean))
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         boolean))
       (list/s
        (->s
         integer
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean)))
        (->s
         integer
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         boolean)
        (->s
         integer
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))))
      (->s
       (list/s
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s integer integer integer integer))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (->s
          (list/s integer integer integer integer)
          (list/s
           (->s boolean (list/s integer integer integer integer))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (->s
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))))
           (->s boolean (->s (list/s integer integer integer integer) boolean))
           (->s integer boolean)
           (->s integer (list/s integer integer integer integer))
           (->s integer (list/s integer integer integer integer)))))
        (->s
         integer
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer))))
        (->s integer (list/s integer integer integer integer))
        (->s integer (list/s integer integer integer integer)))
       (list/s
        (->s
         integer
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean))
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         boolean)))
      (->s
       (list/s
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s integer integer integer integer))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (->s
          (list/s integer integer integer integer)
          (list/s
           (->s boolean (list/s integer integer integer integer))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (->s
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))))
           (->s boolean (->s (list/s integer integer integer integer) boolean))
           (->s integer boolean)
           (->s integer (list/s integer integer integer integer))
           (->s integer (list/s integer integer integer integer)))))
        (->s
         integer
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer))))
        (->s integer (list/s integer integer integer integer))
        (->s integer (list/s integer integer integer integer)))
       boolean))
     (list/s
      (->s
       integer
       (->s
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))
        (list/s
         integer
         (or/s
          (->s
           (list/s integer integer integer integer)
           (list/s integer integer integer integer))
          (list/s integer integer integer integer)
          boolean))))
      (->s
       (list/s
        (->s
         integer
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean))
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         boolean))
       (list/s
        (->s
         integer
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean)))
        (->s
         integer
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         boolean)
        (->s
         integer
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))))
      (->s
       (list/s
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s integer integer integer integer))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (->s
          (list/s integer integer integer integer)
          (list/s
           (->s boolean (list/s integer integer integer integer))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (->s
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))))
           (->s boolean (->s (list/s integer integer integer integer) boolean))
           (->s integer boolean)
           (->s integer (list/s integer integer integer integer))
           (->s integer (list/s integer integer integer integer)))))
        (->s
         integer
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer))))
        (->s integer (list/s integer integer integer integer))
        (->s integer (list/s integer integer integer integer)))
       (list/s
        (->s
         integer
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean))
         (list/s
          (->s integer boolean)
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean)))
          (->s integer boolean)
          (->s boolean boolean)
          (->s boolean boolean)
          (->s integer boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s
          (->s
           integer
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean boolean)
          (->s boolean boolean)
          (->s boolean boolean)))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         boolean)))
      (->s
       (list/s
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (list/s integer integer integer integer))
        (->s
         (list/s
          integer
          (or/s
           (->s
            (list/s integer integer integer integer)
            (list/s integer integer integer integer))
           (list/s integer integer integer integer)
           boolean))
         (->s
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))
          (list/s
           integer
           (or/s
            (->s
             (list/s integer integer integer integer)
             (list/s integer integer integer integer))
            (list/s integer integer integer integer)
            boolean))))
        (->s
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer)))
         (->s
          (list/s integer integer integer integer)
          (list/s
           (->s boolean (list/s integer integer integer integer))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (->s
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))
             (list/s
              integer
              (or/s
               (->s
                (list/s integer integer integer integer)
                (list/s integer integer integer integer))
               (list/s integer integer integer integer)
               boolean))))
           (->s boolean (->s (list/s integer integer integer integer) boolean))
           (->s integer boolean)
           (->s integer (list/s integer integer integer integer))
           (->s integer (list/s integer integer integer integer)))))
        (->s
         integer
         (list/s
          (->s boolean (list/s integer integer integer integer))
          (->s
           (list/s
            integer
            (or/s
             (->s
              (list/s integer integer integer integer)
              (list/s integer integer integer integer))
             (list/s integer integer integer integer)
             boolean))
           (->s
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))
            (list/s
             integer
             (or/s
              (->s
               (list/s integer integer integer integer)
               (list/s integer integer integer integer))
              (list/s integer integer integer integer)
              boolean))))
          (->s boolean (->s (list/s integer integer integer integer) boolean))
          (->s integer boolean)
          (->s integer (list/s integer integer integer integer))
          (->s integer (list/s integer integer integer integer))))
        (->s integer (list/s integer integer integer integer))
        (->s integer (list/s integer integer integer integer)))
       boolean))))
   boolean))
 #:prop
 (prop-not-exn
  (Î» ()
    (struct _image (impl))
    (define _empty-scene
      (convert-it
       |M(image empty-scene (->s (list/s integer integer integer integer) (list/s integer integer integer integer) (struct/s _image any/s)) (-> number? number? image?))|
       (->s
        (list/s integer integer integer integer)
        (list/s integer integer integer integer)
        (struct/s _image any/s))
       L
       #:arithmetic-coercion-both))
    (define _place-image
      (convert-it
       |M(image place-image (->s (struct/s _image any/s) (list/s integer integer integer integer) (list/s integer integer integer integer) (struct/s _image any/s) (struct/s _image any/s)) (-> image? number? number? image? image?))|
       (->s
        (struct/s _image any/s)
        (list/s integer integer integer integer)
        (list/s integer integer integer integer)
        (struct/s _image any/s)
        (struct/s _image any/s))
       L
       #:arithmetic-coercion-both))
    (define _circle
      (convert-it
       |M(image circle (->s (list/s integer integer integer integer) string/s string/s (struct/s _image any/s)) (-> number? string? string? image?))|
       (->s
        (list/s integer integer integer integer)
        string/s
        string/s
        (struct/s _image any/s))
       L
       #:arithmetic-coercion-both))
    (define-id-with-ctc (-> any/c boolean?) _image? image? bug bug)
    (define-id-with-ctc
     (-> c:number? c:number? image?)
     _empty-scene
     empty-scene
     bad-input
     bug)
    (define-id-with-ctc
     (-> image? c:number? c:number? image? image?)
     _place-image
     place-image
     bad-input
     bug)
    (define-id-with-ctc
     (-> c:number? string? string? image?)
     _circle
     circle
     bad-input
     bug)
    (define _sqrt
      (convert-it
       |M(math sqrt (->s (list/s integer integer integer integer) (list/s integer integer integer integer)) (-> number? number?))|
       (->s
        (list/s integer integer integer integer)
        (list/s integer integer integer integer))
       L
       #:arithmetic-coercion-both))
    (define (_min x y) (if (c:<= x y) x y))
    (define (_max x y) (if (c:>= x y) x y))
    (define (_abs x)
      (if (c:>= x (c:racket-number->c 0)) x (c:- (c:racket-number->c 0) x)))
    (define (_sqr x) (c:* x x))
    (define-id-with-ctc (-> c:number? c:number? c:number?) _min c:min bug bug)
    (define-id-with-ctc (-> c:number? c:number? c:number?) _max c:max bug bug)
    (define-id-with-ctc (-> c:number? c:number?) _abs c:abs bug bug)
    (define-id-with-ctc (-> c:number? c:number?) _sqrt c:sqrt bad-input bug)
    (define-id-with-ctc (-> c:number? c:number?) _sqr sqr bug bug)
    (define _WIDTH (c:racket-number->c 400))
    (define _HEIGHT (c:racket-number->c 400))
    (define _MT-SCENE (empty-scene _WIDTH _HEIGHT))
    (define _PLAYER-SPEED (c:racket-number->c 4))
    (define _ZOMBIE-SPEED (c:racket-number->c 2))
    (define _ZOMBIE-RADIUS (c:racket-number->c 20))
    (define _PLAYER-RADIUS (c:racket-number->c 20))
    (define _PLAYER-IMG (circle _PLAYER-RADIUS "solid" "green"))
    (define-ctc
     posn/c
     (->i
      ((msg (one-of/c 'x 'y 'posn 'move-toward/speed 'draw-on/image 'dist)))
      (res
       (msg)
       (cond
        ((equal? msg 'x) (-> c:number?))
        ((equal? msg 'y) (-> c:number?))
        ((equal? msg 'posn) (-> posn/c))
        ((equal? msg 'move-toward/speed) (-> posn/c c:number? posn/c))
        ((equal? msg 'draw-on/image) (-> _image? _image? _image?))
        ((equal? msg 'dist) (-> posn/c c:number?))
        (else "error")))))
    (define-ctc
     player/c
     (->i
      ((msg (one-of/c 'posn 'move-toward 'draw-on)))
      (res
       (msg)
       (cond
        ((equal? msg 'posn) (-> posn/c))
        ((equal? msg 'move-toward) (-> posn/c player/c))
        ((equal? msg 'draw-on) (-> _image? _image?))
        (else "error")))))
    (define-ctc
     zombie/c
     (->i
      ((msg (one-of/c 'posn 'draw-on/color 'touching? 'move-toward)))
      (res
       (msg)
       (cond
        ((equal? msg 'posn) (-> posn/c))
        ((equal? msg 'draw-on/color) (-> string? _image? _image?))
        ((equal? msg 'touching?) (-> posn/c boolean?))
        ((equal? msg 'move-toward) (-> posn/c zombie/c))
        (else "error")))))
    (define-ctc
     horde/c
     (->i
      ((msg
        (one-of/c 'dead 'undead 'draw-on 'touching? 'move-toward 'eat-brains)))
      (res
       (msg)
       (cond
        ((equal? msg 'dead) (-> zombies/c))
        ((equal? msg 'undead) (-> zombies/c))
        ((equal? msg 'draw-on) (-> _image? _image?))
        ((equal? msg 'touching?) (-> posn/c boolean?))
        ((equal? msg 'move-toward) (-> posn/c horde/c))
        ((equal? msg 'eat-brains) (-> horde/c))
        (else "error")))))
    (define-ctc
     zombies/c
     (->i
      ((msg (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
      (res
       (msg)
       (cond
        ((equal? msg 'move-toward) (-> posn/c zombies/c))
        ((equal? msg 'draw-on/color) (-> string? _image? _image?))
        ((equal? msg 'touching?) (-> posn/c boolean?))
        ((equal? msg 'kill-all) (-> zombies/c horde/c))
        (else "error")))))
    (define-ctc
     world/c
     (->i
      ((msg (one-of/c 'on-mouse 'on-tick 'to-draw 'stop-when)))
      (res
       (msg)
       (cond
        ((equal? msg 'on-mouse) (-> c:number? c:number? string? world/c))
        ((equal? msg 'on-tick) (-> world/c))
        ((equal? msg 'to-draw) (-> _image?))
        ((equal? msg 'stop-when) (-> boolean?))
        (else "error")))))
    (define (_new-world player mouse zombies)
      (Î» (msg)
        (cond
         ((equal? msg 'on-mouse)
          (Î» (x y me)
            (_new-world
             player
             (if (equal? me "leave") ((player 'posn)) (_new-posn x y))
             zombies)))
         ((equal? msg 'on-tick)
          (Î» ()
            (_new-world
             ((player 'move-toward) mouse)
             mouse
             ((((zombies 'eat-brains)) 'move-toward) ((player 'posn))))))
         ((equal? msg 'to-draw)
          (Î» () ((player 'draw-on) ((zombies 'draw-on) _MT-SCENE))))
         ((equal? msg 'stop-when)
          (Î» () ((zombies 'touching?) ((player 'posn)))))
         (else "unknown message"))))
    (define (_new-player p)
      (Î» (msg)
        (cond
         ((equal? msg 'posn) (Î» () p))
         ((equal? msg 'move-toward)
          (Î» (q) (_new-player ((p 'move-toward/speed) q _PLAYER-SPEED))))
         ((equal? msg 'draw-on) (Î» (scn) ((p 'draw-on/image) _PLAYER-IMG scn)))
         (else "unknown message"))))
    (define (_new-horde undead dead)
      (Î» (msg)
        (cond
         ((equal? msg 'dead) (Î» () dead))
         ((equal? msg 'undead) (Î» () undead))
         ((equal? msg 'draw-on)
          (Î» (scn)
            ((undead 'draw-on/color)
             "yellow"
             ((dead 'draw-on/color) "black" scn))))
         ((equal? msg 'touching?)
          (Î» (p) (or ((undead 'touching?) p) ((dead 'touching?) p))))
         ((equal? msg 'move-toward)
          (Î» (p) (_new-horde ((undead 'move-toward) p) dead)))
         ((equal? msg 'eat-brains) (Î» () ((undead 'kill-all) dead)))
         (else "unknown message"))))
    (define (_new-cons-zombies z r)
      (Î» (msg)
        (cond
         ((equal? msg 'move-toward)
          (Î» (p)
            (_new-cons-zombies ((z 'move-toward) p) ((r 'move-toward) p))))
         ((equal? msg 'draw-on/color)
          (Î» (c s) ((z 'draw-on/color) c ((r 'draw-on/color) c s))))
         ((equal? msg 'touching?)
          (Î» (p) (or ((z 'touching?) p) ((r 'touching?) p))))
         ((equal? msg 'kill-all)
          (Î» (dead)
            (cond
             ((or ((r 'touching?) ((z 'posn))) ((dead 'touching?) ((z 'posn))))
              ((r 'kill-all) (_new-cons-zombies z dead)))
             (else
              (let ((res ((r 'kill-all) dead)))
                (_new-horde
                 (_new-cons-zombies z ((res 'undead)))
                 ((res 'dead))))))))
         (else "unknown message"))))
    (define (_new-mt-zombies)
      (Î» (msg)
        (cond
         ((equal? msg 'move-toward) (Î» (p) (_new-mt-zombies)))
         ((equal? msg 'draw-on/color) (Î» (c s) s))
         ((equal? msg 'touching?) (Î» (p) #f))
         ((equal? msg 'kill-all)
          (Î» (dead) (_new-horde (_new-mt-zombies) dead)))
         (else "unknown message"))))
    (define (_new-zombie p)
      (Î» (msg)
        (cond
         ((equal? msg 'posn) (Î» () p))
         ((equal? msg 'draw-on/color)
          (Î» (c s) ((p 'draw-on/image) (circle _ZOMBIE-RADIUS "solid" c) s)))
         ((equal? msg 'touching?) (Î» (q) (c:<= ((p 'dist) q) _ZOMBIE-RADIUS)))
         ((equal? msg 'move-toward)
          (Î» (q) (_new-zombie ((p 'move-toward/speed) q _ZOMBIE-SPEED))))
         (else "unknown message"))))
    (define (_new-posn x y)
      (Î» (msg)
        (let ((this (_new-posn x y)))
          (cond
           ((equal? msg 'x) (Î» () x))
           ((equal? msg 'y) (Î» () y))
           ((equal? msg 'posn) (Î» () this))
           ((equal? msg 'move-toward/speed)
            (Î» (p speed)
              (let* ((Î´x (c:- ((p 'x)) x))
                     (Î´y (c:- ((p 'y)) y))
                     (move-distance
                      (c:min speed (c:max (c:abs Î´x) (c:abs Î´y)))))
                (cond
                 ((c:< (c:abs Î´x) (c:abs Î´y))
                  ((this 'move)
                   (c:racket-number->c 0)
                   (if (positive? Î´y)
                     move-distance
                     (c:- (c:racket-number->c 0) move-distance))))
                 (else
                  ((this 'move)
                   (if (positive? Î´x)
                     move-distance
                     (c:- (c:racket-number->c 0) move-distance))
                   (c:racket-number->c 0)))))))
           ((equal? msg 'move) (Î» (Î´x Î´y) (_new-posn (c:+ x Î´x) (c:+ y Î´y))))
           ((equal? msg 'draw-on/image)
            (Î» (img scn) (place-image img x y scn)))
           ((equal? msg 'dist)
            (Î» (p)
              (c:sqrt (c:+ (sqr (c:- ((p 'y)) y)) (sqr (c:- ((p 'x)) x))))))
           (else "unknown message")))))
    (define _w0
      (_new-world
       (_new-player (_new-posn (c:racket-number->c 0) (c:racket-number->c 0)))
       (_new-posn (c:racket-number->c 0) (c:racket-number->c 0))
       (_new-horde
        (_new-cons-zombies
         (_new-zombie
          (_new-posn (c:racket-number->c 100) (c:racket-number->c 300)))
         (_new-cons-zombies
          (_new-zombie
           (_new-posn (c:racket-number->c 100) (c:racket-number->c 200)))
          (_new-mt-zombies)))
        (_new-cons-zombies
         (_new-zombie
          (_new-posn (c:racket-number->c 200) (c:racket-number->c 200)))
         (_new-mt-zombies)))))
    (define-id-with-ctc
     (-> player/c posn/c horde/c world/c)
     _new-world
     new-world
     bug
     bug)
    (define-id-with-ctc (-> posn/c player/c) _new-player new-player bug bug)
    (define-id-with-ctc
     (-> zombies/c zombies/c horde/c)
     _new-horde
     new-horde
     bug
     bug)
    (define-id-with-ctc
     (-> zombie/c zombies/c zombies/c)
     _new-cons-zombies
     new-cons-zombies
     bug
     bug)
    (define-id-with-ctc (-> zombies/c) _new-mt-zombies new-mt-zombies bug bug)
    (define-id-with-ctc (-> posn/c zombie/c) _new-zombie new-zombie bug bug)
    (define-id-with-ctc
     (-> c:number? c:number? posn/c)
     _new-posn
     new-posn
     bug
     bug)
    (define-id-with-ctc world/c _w0 w0 bug bug)
    ((apply-ctc
      (-> (-> zombie/c zombies/c zombies/c) dont-care/c)
      (convert-it
       |â€¢(0 (->s (->s (->si ((msg (one-of/c (quote posn) (quote draw-on/color) (quote touching?) (quote move-toward)))) (res (msg) (cond ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote posn) (quote draw-on/color) (quote touching?) (quote move-toward)))) (res (msg) (cond ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote posn) (quote draw-on/color) (quote touching?) (quote move-toward)))) (res (msg) (cond ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) (else "error")))))) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote undead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) ((equal? msg (quote eat-brains)) (->s (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote move-toward/speed)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer) (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))))) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote kill-all)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote undead)) (->s (->si ((msg (one-of/c (quote move-toward) (quote draw-on/color) (quote touching?) (quote kill-all)))) (res (msg) (cond ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote draw-on/color)) (->s string/s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote kill-all)) (->s none/s none/s)) (else "error")))))) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) boolean)) ((equal? msg (quote move-toward)) (->s (->si ((msg (one-of/c (quote x) (quote y) (quote posn) (quote move-toward/speed) (quote draw-on/image) (quote dist)))) (res (msg) (cond ((equal? msg (quote x)) (->s (list/s integer integer integer integer))) ((equal? msg (quote y)) (->s (list/s integer integer integer integer))) ((equal? msg (quote posn)) (->s none/s)) ((equal? msg (quote move-toward/speed)) (->s none/s (list/s integer integer integer integer) none/s)) ((equal? msg (quote draw-on/image)) (->s (struct/s _image any/s) (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote dist)) (->s none/s (list/s integer integer integer integer))) (else "error")))) (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) ((equal? msg (quote eat-brains)) (->s (->si ((msg (one-of/c (quote dead) (quote undead) (quote draw-on) (quote touching?) (quote move-toward) (quote eat-brains)))) (res (msg) (cond ((equal? msg (quote dead)) (->s none/s)) ((equal? msg (quote undead)) (->s none/s)) ((equal? msg (quote draw-on)) (->s (struct/s _image any/s) (struct/s _image any/s))) ((equal? msg (quote touching?)) (->s none/s boolean)) ((equal? msg (quote move-toward)) (->s none/s none/s)) ((equal? msg (quote eat-brains)) (->s none/s)) (else "error")))))) (else "error")))))) (else "error"))))) dont-care/s) (-> (-> zombie/c zombies/c zombies/c) dont-care/c))|
       (->s
        (->s
         (->si
          ((msg (one-of/c 'posn 'draw-on/color 'touching? 'move-toward)))
          (res
           (msg)
           (cond
            ((equal? msg 'posn)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))))
            ((equal? msg 'draw-on/color)
             (->s string/s (struct/s _image any/s) (struct/s _image any/s)))
            ((equal? msg 'touching?)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))
              boolean))
            ((equal? msg 'move-toward)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))
              (->si
               ((msg (one-of/c 'posn 'draw-on/color 'touching? 'move-toward)))
               (res
                (msg)
                (cond
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/color)
                  (->s
                   string/s
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c 'posn 'draw-on/color 'touching? 'move-toward)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      (else "error"))))))
                 (else "error"))))))
            (else "error"))))
         (->si
          ((msg (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
          (res
           (msg)
           (cond
            ((equal? msg 'move-toward)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))
              (->si
               ((msg
                 (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
               (res
                (msg)
                (cond
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'draw-on/color)
                  (->s
                   string/s
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'kill-all)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 (else "error"))))))
            ((equal? msg 'draw-on/color)
             (->s string/s (struct/s _image any/s) (struct/s _image any/s)))
            ((equal? msg 'touching?)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))
              boolean))
            ((equal? msg 'kill-all)
             (->s
              (->si
               ((msg
                 (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
               (res
                (msg)
                (cond
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'draw-on/color)
                  (->s
                   string/s
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'kill-all)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 (else "error"))))
              (->si
               ((msg
                 (one-of/c
                  'dead
                  'undead
                  'draw-on
                  'touching?
                  'move-toward
                  'eat-brains)))
               (res
                (msg)
                (cond
                 ((equal? msg 'dead)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'undead)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'draw-on)
                  (->s (struct/s _image any/s) (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 ((equal? msg 'eat-brains)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 (else "error"))))))
            (else "error"))))
         (->si
          ((msg (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
          (res
           (msg)
           (cond
            ((equal? msg 'move-toward)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))
              (->si
               ((msg
                 (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
               (res
                (msg)
                (cond
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'draw-on/color)
                  (->s
                   string/s
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'kill-all)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 (else "error"))))))
            ((equal? msg 'draw-on/color)
             (->s string/s (struct/s _image any/s) (struct/s _image any/s)))
            ((equal? msg 'touching?)
             (->s
              (->si
               ((msg
                 (one-of/c
                  'x
                  'y
                  'posn
                  'move-toward/speed
                  'draw-on/image
                  'dist)))
               (res
                (msg)
                (cond
                 ((equal? msg 'x)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'y)
                  (->s (list/s integer integer integer integer)))
                 ((equal? msg 'posn)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'move-toward/speed)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))))
                 ((equal? msg 'draw-on/image)
                  (->s
                   (struct/s _image any/s)
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'dist)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (list/s integer integer integer integer)))
                 (else "error"))))
              boolean))
            ((equal? msg 'kill-all)
             (->s
              (->si
               ((msg
                 (one-of/c 'move-toward 'draw-on/color 'touching? 'kill-all)))
               (res
                (msg)
                (cond
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'draw-on/color)
                  (->s
                   string/s
                   (struct/s _image any/s)
                   (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'kill-all)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 (else "error"))))
              (->si
               ((msg
                 (one-of/c
                  'dead
                  'undead
                  'draw-on
                  'touching?
                  'move-toward
                  'eat-brains)))
               (res
                (msg)
                (cond
                 ((equal? msg 'dead)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'undead)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'move-toward
                       'draw-on/color
                       'touching?
                       'kill-all)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'draw-on/color)
                       (->s
                        string/s
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'kill-all) (->s none/s none/s))
                      (else "error"))))))
                 ((equal? msg 'draw-on)
                  (->s (struct/s _image any/s) (struct/s _image any/s)))
                 ((equal? msg 'touching?)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   boolean))
                 ((equal? msg 'move-toward)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'x
                       'y
                       'posn
                       'move-toward/speed
                       'draw-on/image
                       'dist)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'x)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'y)
                       (->s (list/s integer integer integer integer)))
                      ((equal? msg 'posn) (->s none/s))
                      ((equal? msg 'move-toward/speed)
                       (->s
                        none/s
                        (list/s integer integer integer integer)
                        none/s))
                      ((equal? msg 'draw-on/image)
                       (->s
                        (struct/s _image any/s)
                        (struct/s _image any/s)
                        (struct/s _image any/s)))
                      ((equal? msg 'dist)
                       (->s none/s (list/s integer integer integer integer)))
                      (else "error"))))
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 ((equal? msg 'eat-brains)
                  (->s
                   (->si
                    ((msg
                      (one-of/c
                       'dead
                       'undead
                       'draw-on
                       'touching?
                       'move-toward
                       'eat-brains)))
                    (res
                     (msg)
                     (cond
                      ((equal? msg 'dead) (->s none/s))
                      ((equal? msg 'undead) (->s none/s))
                      ((equal? msg 'draw-on)
                       (->s (struct/s _image any/s) (struct/s _image any/s)))
                      ((equal? msg 'touching?) (->s none/s boolean))
                      ((equal? msg 'move-toward) (->s none/s none/s))
                      ((equal? msg 'eat-brains) (->s none/s))
                      (else "error"))))))
                 (else "error"))))))
            (else "error")))))
        dont-care/s)
       L
       #:arithmetic-coercion-both)
      bad-input
      no-blame
      |wrap new-cons-zombies|)
     new-cons-zombies))))
(define (counterexample)
  (define test-result
    (concolic-test
     new-cons-zombies
     #:all?
     #f
     #:strategy
     (simple-destructor-adapter
      (ignore-locals-adapter (simple-prioritize-branch-strategy 1000)))
     #:statistics?
     #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input new-cons-zombies witness)
   '('dead
     'dist
     'draw-on
     'draw-on/color
     'draw-on/image
     'eat-brains
     'kill-all
     'move-toward
     'move-toward/speed
     'posn
     'touching?
     'undead
     'x
     'y)
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (new-cons-zombies test-property)))
(module+ main (counterexample))
