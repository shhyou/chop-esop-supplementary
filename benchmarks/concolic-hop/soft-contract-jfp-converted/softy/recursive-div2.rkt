#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using recursive-div2.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 recursive-div2
 #:inputs
 (|•(0 (list-of any/s) (listof any/c))|
  (list-of
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_recursive-div2 l)
      (if (empty? l) empty (cons (car l) (_recursive-div2 (cdr (cdr l))))))
    (define-id-with-ctc
     (-> (listof any/c) (listof any/c))
     _recursive-div2
     recursive-div2
     bug
     bug)
    (recursive-div2
     (apply-ctc
      (listof any/c)
      (convert-it |•(0 (list-of any/s) (listof any/c))| (list-of any/s) L)
      bad-input
      no-blame
      |argument of recursive-div2|)))))
(define (counterexample)
  (define test-result
    (concolic-test recursive-div2 #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input recursive-div2 witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (recursive-div2 test-property)))
(module+ main (counterexample))
