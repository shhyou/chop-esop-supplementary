#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using last-pair.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 last-pair
 #:inputs
 (|•(0 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 (|•(1 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_lastpair x) (if (cons? x) (_lastpair (cdr x)) x))
    (define-id-with-ctc (-> cons? cons?) _lastpair lastpair bug bug)
    (lastpair
     (cons
      (apply-ctc
       any/c
       (convert-it |•(0 any/s any/c)| any/s L)
       bad-input
       no-blame
       |argument of cons|)
      (apply-ctc
       any/c
       (convert-it |•(1 any/s any/c)| any/s L)
       bad-input
       no-blame
       |argument of cons|))))))
(define (counterexample)
  (define test-result (concolic-test last-pair #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input last-pair witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (last-pair test-property)))
(module+ main (counterexample))
