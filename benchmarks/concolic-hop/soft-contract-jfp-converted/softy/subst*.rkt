#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using subst*.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 subst*
 #:inputs
 (|•(0 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 (|•(1 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 (|•(2 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_subst* new old t)
      (cond
       ((equal? old t) new)
       ((cons? t) (cons (_subst* new old (car t)) (_subst* new old (cdr t))))
       (else t)))
    (define-id-with-ctc (-> any/c any/c any/c cons?) _subst* subst* bug bug)
    (subst*
     (apply-ctc
      any/c
      (convert-it |•(0 any/s any/c)| any/s L)
      bad-input
      no-blame
      |argument of subst*|)
     (apply-ctc
      any/c
      (convert-it |•(1 any/s any/c)| any/s L)
      bad-input
      no-blame
      |argument of subst*|)
     (apply-ctc
      any/c
      (convert-it |•(2 any/s any/c)| any/s L)
      bad-input
      no-blame
      |argument of subst*|)))))
(define (counterexample)
  (define test-result (concolic-test subst* #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input subst* witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (subst* test-property)))
(module+ main (counterexample))
