#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using taut.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 taut
 #:inputs
 (|•(0 (or/s boolean integer (->s boolean (or/s boolean integer (->s boolean (or/s boolean integer (->s boolean none/s)))))) taut-arg/c)|
  (or/s
   boolean
   integer
   (->s
    boolean
    (or/s
     boolean
     integer
     (->s boolean (or/s boolean integer (->s boolean boolean)))))))
 #:prop
 (prop-not-exn
  (λ ()
    (define-ctc
     taut-arg/c
     (or/c
      boolean?
      number?
      (-> boolean? (recursive-contract taut-arg/c #:chaperone))))
    (define (_taut b)
      (cond ((procedure? b) (and (_taut (b #t)) (_taut (b #f)))) (else b)))
    (define-id-with-ctc (-> taut-arg/c boolean?) _taut taut bug bug)
    (taut
     (apply-ctc
      taut-arg/c
      (convert-it
       |•(0 (or/s boolean integer (->s boolean (or/s boolean integer (->s boolean (or/s boolean integer (->s boolean none/s)))))) taut-arg/c)|
       (or/s
        boolean
        integer
        (->s
         boolean
         (or/s
          boolean
          integer
          (->s boolean (or/s boolean integer (->s boolean none/s))))))
       L)
      bad-input
      no-blame
      |argument of taut|)))))
(define (counterexample)
  (define test-result (concolic-test taut #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input taut witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (taut test-property)))
(module+ main (counterexample))
