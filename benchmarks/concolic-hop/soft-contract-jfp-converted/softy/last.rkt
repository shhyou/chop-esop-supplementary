#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using last.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 last
 #:inputs
 (|•(0 (list-of any/s) (listof any/c))|
  (list-of
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_Y f)
      (λ (y)
        (((λ (x) (f (λ (z) ((x x) z)))) (λ (x) (f (λ (z) ((x x) z))))) y)))
    (define-id-with-ctc
     (-> (-> (-> any/c any/c) (-> any/c any/c)) (-> any/c any/c))
     _Y
     Y
     bug
     bug)
    (define (_last l)
      ((Y (λ (f) (λ (x) (if (empty? (cdr x)) (car x) (f (cdr x)))))) l))
    (define-id-with-ctc (-> (listof any/c) any/c) _last last bug bug)
    (last
     (apply-ctc
      (listof any/c)
      (convert-it |•(0 (list-of any/s) (listof any/c))| (list-of any/s) L)
      bad-input
      no-blame
      |argument of last|)))))
(define (counterexample)
  (define test-result (concolic-test last #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input last witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (last test-property)))
(module+ main (counterexample))
