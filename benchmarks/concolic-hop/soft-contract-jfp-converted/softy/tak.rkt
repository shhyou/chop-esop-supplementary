#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using tak.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it concolic-hop/complex)
(define-lump L)
(define-concolic-test
 tak
 #:inputs
 (|M(nums a (list/s integer integer integer integer) number?)|
  (list/s integer integer integer integer))
 (|M(nums b (list/s integer integer integer integer) number?)|
  (list/s integer integer integer integer))
 (|M(nums c (list/s integer integer integer integer) number?)|
  (list/s integer integer integer integer))
 #:prop
 (prop-not-exn
  (Î» ()
    (define (_tak x y z)
      (if (false? (c:< y x))
        z
        (_tak
         (_tak (c:- x (c:racket-number->c 1)) y z)
         (_tak (c:- y (c:racket-number->c 1)) z x)
         (_tak (c:- z (c:racket-number->c 1)) x y))))
    (define-id-with-ctc
     (-> c:number? c:number? c:number? c:number?)
     _tak
     tak
     bug
     bug)
    (define _a
      (convert-it
       |M(nums a (list/s integer integer integer integer) number?)|
       (list/s integer integer integer integer)
       L
       #:arithmetic-coercion-both))
    (define _b
      (convert-it
       |M(nums b (list/s integer integer integer integer) number?)|
       (list/s integer integer integer integer)
       L
       #:arithmetic-coercion-both))
    (define _c
      (convert-it
       |M(nums c (list/s integer integer integer integer) number?)|
       (list/s integer integer integer integer)
       L
       #:arithmetic-coercion-both))
    (define-id-with-ctc c:number? _a a bad-input bug)
    (define-id-with-ctc c:number? _b b bad-input bug)
    (define-id-with-ctc c:number? _c c bad-input bug)
    (tak a b c))))
(define (counterexample)
  (define test-result (concolic-test tak #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input tak witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (tak test-property)))
(module+ main (counterexample))
