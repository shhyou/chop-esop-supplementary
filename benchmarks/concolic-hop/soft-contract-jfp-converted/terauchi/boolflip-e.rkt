#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using boolflip-e.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 boolflip-e
 #:inputs
 (|M(assert assert (->s any/s any/s) (-> (not/c false?) any/c))|
  (->s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (Î» ()
    (define _assert
      (convert-it
       |M(assert assert (->s any/s any/s) (-> (not/c false?) any/c))|
       (->s any/s any/s)
       L))
    (define-id-with-ctc (-> (not/c false?) any/c) _assert assert bad-input bug)
    (define (_f x y) (if x (_f y y) (_g x y)))
    (define (_g x y) (assert y))
    (define (_h x) (assert x))
    (define (_main) (if (< 0 1) (_f (< 0 1) (< 1 0)) (_h (< 1 0))))
    (define-id-with-ctc (-> any/c) _main main bug bug)
    (main))))
(define (counterexample)
  (define test-result (concolic-test boolflip-e #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input boolflip-e witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (boolflip-e test-property)))
(module+ main (counterexample))
