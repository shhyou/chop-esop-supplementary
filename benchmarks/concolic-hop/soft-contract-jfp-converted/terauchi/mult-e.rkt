#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using mult-e.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 mult-e
 #:inputs
 (|M(assert assert (->s any/s any/s) (-> (not/c false?) any/c))|
  (->s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 (Amb integer)
 (|B(0 assert assert (->s (->s any/s any/s) dont-care/s) (-> (-> (not/c false?) any/c) dont-care/c))|
  (->s
   (->s
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean)
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean))
   boolean))
 (|B(1 main m (->s (->s integer any/s) dont-care/s) (-> (-> integer? any/c) dont-care/c))|
  (->s
   (->s
    integer
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean))
   boolean))
 #:prop
 (prop-not-exn
  (Î» ()
    (define _assert
      (convert-it
       |M(assert assert (->s any/s any/s) (-> (not/c false?) any/c))|
       (->s any/s any/s)
       L))
    (define-id-with-ctc (-> (not/c false?) any/c) _assert assert bad-input bug)
    (define (_mult x y) (if (or (<= x 0) (<= y 0)) 0 (+ x (_mult x (- y 1)))))
    (define (_main n) (assert (<= 600 (_mult 100 n))))
    (define-id-with-ctc (-> integer? any/c) _main main bug bug)
    (cond
     ((= Amb 0)
      ((apply-ctc
        (-> (-> (not/c false?) any/c) dont-care/c)
        (convert-it
         |B(0 assert assert (->s (->s any/s any/s) dont-care/s) (-> (-> (not/c false?) any/c) dont-care/c))|
         (->s (->s any/s any/s) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap assert|)
       assert))
     (else
      ((apply-ctc
        (-> (-> integer? any/c) dont-care/c)
        (convert-it
         |B(1 main m (->s (->s integer any/s) dont-care/s) (-> (-> integer? any/c) dont-care/c))|
         (->s (->s integer any/s) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap main|)
       main))))))
(define (counterexample)
  (define test-result (concolic-test mult-e #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input mult-e witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (mult-e test-property)))
(module+ main (counterexample))
