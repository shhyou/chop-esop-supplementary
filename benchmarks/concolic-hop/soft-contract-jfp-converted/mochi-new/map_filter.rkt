#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using map_filter.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 map_filter
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_make_list m) (if (<= m 0) empty (cons 0 (_make_list (- m 1)))))
    (define (_make_list_list m)
      (if (<= m 0) empty (cons (_make_list 0) (_make_list_list (- m 1)))))
    (define (_ne xs) (if (empty? xs) 1 0))
    (define (_filter p xs)
      (cond
       ((empty? xs) empty)
       (else
        (if (= 1 (p (car xs)))
          (cons (car xs) (_filter p (cdr xs)))
          (_filter p (cdr xs))))))
    (define (_map f xs)
      (cond ((empty? xs) empty) (else (cons (f (car xs)) (_map f (cdr xs))))))
    (define (_main m) (_map car (_filter _ne (_make_list_list m))))
    (define-id-with-ctc (-> integer? any/c) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test map_filter #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input map_filter witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (map_filter test-property)))
(module+ main (counterexample))
