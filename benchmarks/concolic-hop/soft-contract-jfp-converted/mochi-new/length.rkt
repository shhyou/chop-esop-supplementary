#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using length.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 length
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_length xs)
      (cond ((empty? xs) 0) (else (+ 1 (_length (cdr xs))))))
    (define (_make_list n) (if (< n 0) empty (cons n (_make_list (- n 1)))))
    (define (_main n) (let ((xs (_make_list n))) (= n (_length xs))))
    (define-id-with-ctc (-> integer? (not/c false?)) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test length #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input length witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (length test-property)))
(module+ main (counterexample))
