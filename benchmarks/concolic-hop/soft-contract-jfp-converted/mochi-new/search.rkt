#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using search.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 search
 #:inputs
 (|•(0 integer integer?)| integer)
 (|•(1 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_exists test f n m)
      (cond
       ((< n m) (if (test (f n)) n (_exists test f (+ n 1) m)))
       (else #f)))
    (define (_mult3 n) (* 3 n))
    (define (_main n m)
      (let* ((test (λ (x) (= x m))) (res (_exists test _mult3 0 n)))
        (if res (and (< 0 res) (< res n)) #t)))
    (define-id-with-ctc
     (-> integer? integer? (not/c false?))
     _main
     main
     bug
     bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)
     (apply-ctc
      integer?
      (convert-it |•(1 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test search #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input search witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (search test-property)))
(module+ main (counterexample))
