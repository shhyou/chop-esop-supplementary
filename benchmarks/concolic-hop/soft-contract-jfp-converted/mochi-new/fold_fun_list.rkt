#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using fold_fun_list.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 fold_fun_list
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_mk-list n)
      (if (<= n 0) empty (cons (λ (m) (- m n)) (_mk-list (- n 1)))))
    (define (_foldr f z xs)
      (if (empty? xs) z (f (car xs) (_foldr f z (cdr xs)))))
    (define (_compose f g) (λ (x) (f (g x))))
    (define (_main n) (let ((xs (_mk-list n))) (_foldr _compose (λ (x) x) xs)))
    (define-id-with-ctc
     (-> integer? (listof (-> integer? integer?)))
     _mk-list
     mk-list
     bug
     bug)
    (define-id-with-ctc
     (->
      (-> (-> integer? integer?) (-> integer? integer?) (-> integer? integer?))
      (-> integer? integer?)
      (listof (-> integer? integer?))
      (-> integer? integer?))
     _foldr
     foldr
     bug
     bug)
    (define-id-with-ctc
     (->i
      ((n integer?))
      (res (n) (and/c (-> integer? integer?) (λ (f) (>= (f 0) 0)))))
     _main
     main
     bug
     bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test fold_fun_list #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input fold_fun_list witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (fold_fun_list test-property)))
(module+ main (counterexample))
