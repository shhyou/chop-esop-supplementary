#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using risers.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 risers
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_make_list m) (if (<= m 0) empty (cons 0 (_make_list (- m 1)))))
    (define (_risersElse x xs)
      (let ((s (car xs)) (ss (cdr xs))) (cons (list x) (cons s ss))))
    (define (_risersThen x xs)
      (let ((s (car xs)) (ss (cdr xs))) (cons (cons x s) ss)))
    (define (_risers xs)
      (cond
       ((empty? xs) empty)
       (else
        (let ((x (car xs)) (y (car (cdr xs))) (etc (cdr (cdr xs))))
          (cond
           ((< x y) (_risersThen x (_risers (cdr xs))))
           (else (_risersElse x (_risers (cdr xs)))))))))
    (define (_main m) (_risers (_make_list m)))
    (define-id-with-ctc (-> integer? any/c) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test risers #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input risers witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (risers test-property)))
(module+ main (counterexample))
