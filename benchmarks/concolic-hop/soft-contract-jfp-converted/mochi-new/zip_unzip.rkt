#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using zip_unzip.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 zip_unzip
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_zip xs ys)
      (cond
       ((empty? xs) (if (empty? ys) empty (add1 "error1")))
       (else
        (if (empty? ys)
          (add1 "error2")
          (cons (cons (car xs) (car ys)) (_zip (cdr xs) ys))))))
    (define (_unzip xs)
      (cond
       ((empty? xs) (cons empty empty))
       (else
        (let ((rst (_unzip (cdr xs))) (hd (car xs)))
          (cons (cons (car hd) (car rst)) (cons (cdr hd) (cdr rst)))))))
    (define (_make_list n)
      (if (< n 0) empty (cons (cons 0 0) (_make_list (- n 1)))))
    (define (_main n)
      (let ((xs (_make_list n)))
        (let ((zs (_unzip xs))) (_zip (car zs) (cdr zs)))))
    (define-id-with-ctc (-> integer? any/c) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test zip_unzip #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input zip_unzip witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (zip_unzip test-property)))
(module+ main (counterexample))
