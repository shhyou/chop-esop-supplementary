#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using insertion-sort.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 insertion-sort
 #:inputs
 (|M(opaque insert (->s integer (list-of integer) (list-of integer)) (-> integer? SORTED/C (and/c (non-empty-listof integer?) ne-sorted?)))|
  (->s integer (->s (list-of integer) (list-of integer))))
 (|M(opaque ne-sorted? (->s (list-of integer) boolean) (-> (non-empty-listof integer?) boolean?))|
  (->s (list-of integer) boolean))
 (|•(0 (list-of any/s) (listof any/c))|
  (list-of
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define _insert
      (convert-it
       |M(opaque insert (->s integer (list-of integer) (list-of integer)) (-> integer? SORTED/C (and/c (non-empty-listof integer?) ne-sorted?)))|
       (->s integer (list-of integer) (list-of integer))
       L))
    (define _ne-sorted?
      (convert-it
       |M(opaque ne-sorted? (->s (list-of integer) boolean) (-> (non-empty-listof integer?) boolean?))|
       (->s (list-of integer) boolean)
       L))
    (define-id-with-ctc
     (-> (non-empty-listof integer?) boolean?)
     _ne-sorted?
     ne-sorted?
     bad-input
     bug)
    (define-ctc
     SORTED/C
     (or/c empty? (and/c (non-empty-listof integer?) ne-sorted?)))
    (define-id-with-ctc
     (-> integer? SORTED/C (and/c (non-empty-listof integer?) ne-sorted?))
     _insert
     insert
     bad-input
     bug)
    (define (_sort xs) (_foldl insert xs empty))
    (define (_foldl f l b) (if (empty? l) b (_foldl f (cdr l) (f (car l) b))))
    (define-id-with-ctc
     (->i
      ((l (listof any/c)))
      (res (l) (and/c SORTED/C (λ (r) (if (empty? l) (empty? r) (cons? r))))))
     _sort
     sort
     bug
     bug)
    (sort
     (apply-ctc
      (listof any/c)
      (convert-it |•(0 (list-of any/s) (listof any/c))| (list-of any/s) L)
      bad-input
      no-blame
      |argument of sort|)))))
(define (counterexample)
  (define test-result
    (concolic-test insertion-sort #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input insertion-sort witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (insertion-sort test-property)))
(module+ main (counterexample))
