#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using sum-filter.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 sum-filter
 #:inputs
 (|M(filter filter (->s (->s any/s any/s) (list-of any/s) (list-of any/s)) (->i ((p? (-> any/c any/c)) (_ (listof any/c))) (res (p? _) (listof (λ (y) (p? y))))))|
  (->s
   (->s
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean)
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean))
   (->s
    (list-of
     (or/s
      (->s integer integer)
      (list/s boolean (list-of integer))
      integer
      boolean))
    (list-of
     (or/s
      (->s integer integer)
      (list/s boolean (list-of integer))
      integer
      boolean)))))
 (|•(0 (list-of any/s) (listof any/c))|
  (list-of
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define _filter
      (convert-it
       |M(filter filter (->s (->s any/s any/s) (list-of any/s) (list-of any/s)) (->i ((p? (-> any/c any/c)) (_ (listof any/c))) (res (p? _) (listof (λ (y) (p? y))))))|
       (->s (->s any/s any/s) (list-of any/s) (list-of any/s))
       L))
    (define-id-with-ctc
     (->i
      ((p? (-> any/c any/c)) (_ (listof any/c)))
      (res (p? _) (listof (λ (y) (p? y)))))
     _filter
     filter
     bad-input
     bug)
    (define (_add-nums xs) (_foldl + 0 xs))
    (define (_foldl f z xs)
      (if (empty? xs) z (_foldl f (f (car xs) z) (cdr xs))))
    (define-id-with-ctc (-> (listof any/c) number?) _add-nums add-nums bug bug)
    (add-nums
     (apply-ctc
      (listof any/c)
      (convert-it |•(0 (list-of any/s) (listof any/c))| (list-of any/s) L)
      bad-input
      no-blame
      |argument of add-nums|)))))
(define (counterexample)
  (define test-result (concolic-test sum-filter #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input sum-filter witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (sum-filter test-property)))
(module+ main (counterexample))
