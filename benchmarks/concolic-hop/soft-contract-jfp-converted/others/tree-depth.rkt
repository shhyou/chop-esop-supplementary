#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using tree-depth.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 tree-depth
 #:inputs
 (|•(0 (or/s (struct/s leaf) (struct/s node (or/s (struct/s leaf) (struct/s node (or/s (struct/s leaf) (struct/s node none/s none/s)) (or/s (struct/s leaf) (struct/s node none/s none/s)))) (or/s (struct/s leaf) (struct/s node (or/s (struct/s leaf) (struct/s node none/s none/s)) (or/s (struct/s leaf) (struct/s node none/s none/s)))))) TREE/C)|
  (or/s
   (list/s integer)
   (list/s
    integer
    (or/s
     (list/s integer)
     (list/s
      integer
      (or/s (list/s integer) (list/s integer boolean boolean))
      (or/s (list/s integer) (list/s integer boolean boolean))))
    (or/s
     (list/s integer)
     (list/s
      integer
      (or/s (list/s integer) (list/s integer boolean boolean))
      (or/s (list/s integer) (list/s integer boolean boolean)))))))
 #:prop
 (prop-not-exn
  (λ ()
    (struct _leaf ())
    (struct _node (l r))
    (define (_depth t)
      (if (_node? t) (+ 1 (_max (_depth (_node-l t)) (_depth (_node-r t)))) 0))
    (define (_max x y) (if (> x y) x y))
    (define-ctc
     TREE/C
     (or/c
      (struct/c _leaf)
      (struct/c
       _node
       (recursive-contract TREE/C #:chaperone)
       (recursive-contract TREE/C #:chaperone))))
    (define-id-with-ctc
     (-> TREE/C (and/c integer? (>/c 0)))
     _depth
     depth
     bug
     bug)
    (define-id-with-ctc any/c _leaf leaf bug bug)
    (define-id-with-ctc any/c _node node bug bug)
    (depth
     (apply-ctc
      TREE/C
      (convert-it
       |•(0 (or/s (struct/s leaf) (struct/s node (or/s (struct/s leaf) (struct/s node (or/s (struct/s leaf) (struct/s node none/s none/s)) (or/s (struct/s leaf) (struct/s node none/s none/s)))) (or/s (struct/s leaf) (struct/s node (or/s (struct/s leaf) (struct/s node none/s none/s)) (or/s (struct/s leaf) (struct/s node none/s none/s)))))) TREE/C)|
       (or/s
        (struct/s leaf)
        (struct/s
         node
         (or/s
          (struct/s leaf)
          (struct/s
           node
           (or/s (struct/s leaf) (struct/s node none/s none/s))
           (or/s (struct/s leaf) (struct/s node none/s none/s))))
         (or/s
          (struct/s leaf)
          (struct/s
           node
           (or/s (struct/s leaf) (struct/s node none/s none/s))
           (or/s (struct/s leaf) (struct/s node none/s none/s))))))
       L)
      bad-input
      no-blame
      |argument of depth|)))))
(define (counterexample)
  (define test-result (concolic-test tree-depth #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input tree-depth witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (tree-depth test-property)))
(module+ main (counterexample))
