#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using inc-or-greet.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 inc-or-greet
 #:inputs
 (|M(lib string-append (->s string/s string/s string/s) (-> string? string? string?))|
  (->s integer (->s integer integer)))
 (|•(0 boolean boolean?)| boolean)
 (|•(1 string-or-integer/s (or/c string? integer?))| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define _string-append
      (convert-it
       |M(lib string-append (->s string/s string/s string/s) (-> string? string? string?))|
       (->s string/s string/s string/s)
       L))
    (define-id-with-ctc
     (-> string? string? string?)
     _string-append
     string-append
     bad-input
     bug)
    (define (_inc-or-greet mode y)
      (if mode
        (if (integer? y) (+ y 1) #f)
        (if (string? y) (string-append "Hello" y) #f)))
    (define-id-with-ctc
     (-> boolean? (or/c string? integer?) (or/c integer? string?))
     _inc-or-greet
     inc-or-greet
     bug
     bug)
    (inc-or-greet
     (apply-ctc
      boolean?
      (convert-it |•(0 boolean boolean?)| boolean L)
      bad-input
      no-blame
      |argument of inc-or-greet|)
     (apply-ctc
      (or/c string? integer?)
      (convert-it
       |•(1 string-or-integer/s (or/c string? integer?))|
       string-or-integer/s
       L)
      bad-input
      no-blame
      |argument of inc-or-greet|)))))
(define (counterexample)
  (define test-result (concolic-test inc-or-greet #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input inc-or-greet witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (inc-or-greet test-property)))
(module+ main (counterexample))
