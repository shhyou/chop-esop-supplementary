#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using argmin.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it concolic-hop/complex
         (only-in racket/base error))
(define-lump L)
(define INPUT
  (λ (x8)
    (cond
      ((procedure? x8)
       (let ((x9
              (x8
               (λ (x10)
                 (cond
                   ((procedure? x10) (error "ASSERT_UNREACHABLE"))
                   ((null? x10) (error "ASSERT_UNREACHABLE"))
                   ((pair? x10) (error "ASSERT_UNREACHABLE"))
                   ((equal? x10 #f) (cons 0 (cons 0 (cons 0 (cons 0 null)))))
                   (else (error "ASSERT_UNREACHABLE")))))))
         (cond
           ((procedure? x9)
            (let ((x11 (x9 (cons #f (cons null null)))))
              (error "ASSERT_UNREACHABLE")))
           ((null? x9) (error "ASSERT_UNREACHABLE"))
           ((pair? x9) (error "ASSERT_UNREACHABLE"))
           (else (error "ASSERT_UNREACHABLE")))))
      ((null? x8) (error "ASSERT_UNREACHABLE"))
      ((pair? x8) (error "ASSERT_UNREACHABLE"))
      (else (error "ASSERT_UNREACHABLE"))))

  )
(define ((argmin f) xs) (f (car xs)))
(INPUT
 argmin)
