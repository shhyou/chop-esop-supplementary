#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using rsa.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 rsa
 #:inputs
 (|M(prime? prime? (->s any/s any/s) (-> any/c any/c))|
  (->s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 (|M(keygen keygen (->s any/s integer) (-> any/c (λ (x) (prime? x))))|
  (->s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   integer))
 (|M(rsa rsa (->s integer integer integer) (-> (λ (x) (prime? x)) number? number?))|
  (->s integer (->s integer integer)))
 (|•(0 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define _prime?
      (convert-it
       |M(prime? prime? (->s any/s any/s) (-> any/c any/c))|
       (->s any/s any/s)
       L))
    (define-id-with-ctc (-> any/c any/c) _prime? prime? bad-input bug)
    (define _keygen
      (convert-it
       |M(keygen keygen (->s any/s integer) (-> any/c (λ (x) (prime? x))))|
       (->s any/s integer)
       L))
    (define-id-with-ctc
     (-> any/c (λ (x) (prime? x)))
     _keygen
     keygen
     bad-input
     bug)
    (define _rsa
      (convert-it
       |M(rsa rsa (->s integer integer integer) (-> (λ (x) (prime? x)) number? number?))|
       (->s integer integer integer)
       L))
    (define-id-with-ctc
     (-> (λ (x) (prime? x)) number? number?)
     _rsa
     rsa
     bad-input
     bug)
    (define (_enc x) (rsa (keygen #t) x))
    (define-id-with-ctc (-> any/c any/c) _enc enc bug bug)
    (enc
     (apply-ctc
      any/c
      (convert-it |•(0 any/s any/c)| any/s L)
      bad-input
      no-blame
      |argument of enc|)))))
(define (counterexample)
  (define test-result (concolic-test rsa #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input rsa witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (rsa test-property)))
(module+ main (counterexample))
