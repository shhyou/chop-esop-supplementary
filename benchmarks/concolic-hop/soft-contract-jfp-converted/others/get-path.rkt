#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using get-path.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L (0 "get-child") (1 "hd") (2 "tl"))
(define-concolic-test
 get-path
 #:inputs
 (|•(0 (->si ((msg (one-of/c "get-child"))) (res (msg) (cond (else (->s string/s (->si ((msg (one-of/c "get-child"))) (res (msg) (cond (else (->s string/s (->si ((msg (one-of/c "get-child"))) (res (msg) (cond (else (->s string/s none/s))))))))))))))) dom/c)|
  (list/s (->s integer (list/s (->s integer (list/s (->s integer boolean)))))))
 (|•(1 (->si ((msg (one-of/c "hd" "tl"))) (res (msg) (cond ((equal? msg "hd") string/s) (else (or/s boolean (->si ((msg (one-of/c "hd" "tl"))) (res (msg) (cond ((equal? msg "hd") string/s) (else (or/s boolean (->si ((msg (one-of/c "hd" "tl"))) (res (msg) (cond ((equal? msg "hd") string/s) (else boolean)))))))))))))) path/c)|
  (list/s
   integer
   (or/s boolean (list/s integer (or/s boolean (list/s integer boolean))))))
 #:prop
 (prop-not-exn
  (λ ()
    (define-ctc
     path/c
     (->i
      ((msg (or/c "hd" "tl")))
      (res
       (msg)
       (cond ((equal? msg "hd") string?) (else (or/c false? path/c))))))
    (define-ctc
     dom/c
     (->i ((msg (or/c "get-child"))) (res (msg) (-> string? dom/c))))
    (define (_get-path root p) (_while root p))
    (define (_while cur path)
      (if (and (not (false? path)) (not (false? cur)))
        (_while ((cur "get-child") (path "hd")) (path "hd"))
        cur))
    (define-id-with-ctc (-> dom/c path/c dom/c) _get-path get-path bug bug)
    (get-path
     (apply-ctc
      dom/c
      (convert-it
       |•(0 (->si ((msg (one-of/c "get-child"))) (res (msg) (cond (else (->s string/s (->si ((msg (one-of/c "get-child"))) (res (msg) (cond (else (->s string/s (->si ((msg (one-of/c "get-child"))) (res (msg) (cond (else (->s string/s none/s))))))))))))))) dom/c)|
       (->si
        ((msg (one-of/c "get-child")))
        (res
         (msg)
         (cond
          (else
           (->s
            string/s
            (->si
             ((msg (one-of/c "get-child")))
             (res
              (msg)
              (cond
               (else
                (->s
                 string/s
                 (->si
                  ((msg (one-of/c "get-child")))
                  (res (msg) (cond (else (->s string/s none/s)))))))))))))))
       L)
      bad-input
      no-blame
      |argument of get-path|)
     (apply-ctc
      path/c
      (convert-it
       |•(1 (->si ((msg (one-of/c "hd" "tl"))) (res (msg) (cond ((equal? msg "hd") string/s) (else (or/s boolean (->si ((msg (one-of/c "hd" "tl"))) (res (msg) (cond ((equal? msg "hd") string/s) (else (or/s boolean (->si ((msg (one-of/c "hd" "tl"))) (res (msg) (cond ((equal? msg "hd") string/s) (else boolean)))))))))))))) path/c)|
       (->si
        ((msg (one-of/c "hd" "tl")))
        (res
         (msg)
         (cond
          ((equal? msg "hd") string/s)
          (else
           (or/s
            boolean
            (->si
             ((msg (one-of/c "hd" "tl")))
             (res
              (msg)
              (cond
               ((equal? msg "hd") string/s)
               (else
                (or/s
                 boolean
                 (->si
                  ((msg (one-of/c "hd" "tl")))
                  (res
                   (msg)
                   (cond
                    ((equal? msg "hd") string/s)
                    (else boolean))))))))))))))
       L)
      bad-input
      no-blame
      |argument of get-path|)))))
(define (counterexample)
  (define test-result (concolic-test get-path #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input get-path witness)
   '("get-child" "hd" "tl")
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (get-path test-property)))
(module+ main (counterexample))
