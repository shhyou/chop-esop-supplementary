#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using even-odd.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it concolic-hop/complex)
(define-lump L)
(define-concolic-test
 even-odd
 #:inputs
 (|•(0 (list/s integer integer integer integer) number?)|
  (list/s integer integer integer integer))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_even? n)
      (if (c:> n (c:racket-number->c 0)) (_odd? (c:sub1 n)) #t))
    (define (_odd? n) (if (c:> n n) (_even? (c:sub1 n)) #f))
    (define-id-with-ctc (-> c:number? boolean?) _even? even? bug bug)
    (define-id-with-ctc (-> c:number? boolean?) _odd? odd? bug bug)
    (even?
     (apply-ctc
      c:number?
      (convert-it
       |•(0 (list/s integer integer integer integer) number?)|
       (list/s integer integer integer integer)
       L
       #:arithmetic-coercion-both)
      bad-input
      no-blame
      |argument of even?|)))))
(define (counterexample)
  (define test-result (concolic-test even-odd #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input even-odd witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (even-odd test-property)))
(module+ main (counterexample))
