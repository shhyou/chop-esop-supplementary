#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using foldl.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 foldl
 #:inputs
 (|•(0 (->s integer boolean boolean) (-> number? boolean? boolean?))|
  (->s integer (->s boolean boolean)))
 (|•(1 boolean boolean?)| boolean)
 (|•(2 (list-of integer) (listof number?))| (list-of integer))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_foldl f z xs)
      (if (empty? xs) z (_foldl f (f z (car xs)) (cdr xs))))
    (define-id-with-ctc
     (-> (-> number? boolean? boolean?) boolean? (listof number?) boolean?)
     _foldl
     foldl
     bug
     bug)
    (foldl
     (apply-ctc
      (-> number? boolean? boolean?)
      (convert-it
       |•(0 (->s integer boolean boolean) (-> number? boolean? boolean?))|
       (->s integer boolean boolean)
       L)
      bad-input
      no-blame
      |argument of foldl|)
     (apply-ctc
      boolean?
      (convert-it |•(1 boolean boolean?)| boolean L)
      bad-input
      no-blame
      |argument of foldl|)
     (apply-ctc
      (listof number?)
      (convert-it
       |•(2 (list-of integer) (listof number?))|
       (list-of integer)
       L)
      bad-input
      no-blame
      |argument of foldl|)))))
(define (counterexample)
  (define test-result (concolic-test foldl #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input foldl witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (foldl test-property)))
(module+ main (counterexample))
