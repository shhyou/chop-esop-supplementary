#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using argmin.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it concolic-hop/complex)
(define-lump L)
(define-concolic-test
 argmin
 #:inputs
 (|•(0 (->s (->s (->s any/s (list/s integer integer integer integer)) (cons/s any/s (list-of any/s)) any/s) dont-care/s) (-> (-> (-> any/c number?) (cons/c any/c (listof any/c)) any/c) dont-care/c))|
  (->s
   (->s
    (->s
     (or/s
      (->s
       (list/s integer integer integer integer)
       (list/s integer integer integer integer))
      (list/s integer integer integer integer)
      boolean)
     (list/s integer integer integer integer))
    (->s
     (list/s
      (or/s
       (->s
        (list/s integer integer integer integer)
        (list/s integer integer integer integer))
       (list/s integer integer integer integer)
       boolean)
      (list-of
       (or/s
        (->s
         (list/s integer integer integer integer)
         (list/s integer integer integer integer))
        (list/s integer integer integer integer)
        boolean)))
     (or/s
      (->s
       (list/s integer integer integer integer)
       (list/s integer integer integer integer))
      (list/s integer integer integer integer)
      boolean)))
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_argmin f xs) (_argmin/acc f (car xs) (f (car xs)) (cdr xs)))
    (define (_argmin/acc f a b xs)
      (if (empty? xs)
        a
        (if (c:< b (f (car xs)))
          (_argmin/acc f a b (cdr xs))
          (_argmin/acc f (car xs) (f (car xs)) (cdr xs)))))
    (define-id-with-ctc
     (-> (-> any/c c:number?) (cons/c any/c (listof any/c)) any/c)
     _argmin
     argmin
     bug
     bug)
    ((apply-ctc
      (->
       (-> (-> any/c c:number?) (cons/c any/c (listof any/c)) any/c)
       dont-care/c)
      (convert-it
       |•(0 (->s (->s (->s any/s (list/s integer integer integer integer)) (cons/s any/s (list-of any/s)) any/s) dont-care/s) (-> (-> (-> any/c number?) (cons/c any/c (listof any/c)) any/c) dont-care/c))|
       (->s
        (->s
         (->s any/s (list/s integer integer integer integer))
         (cons/s any/s (list-of any/s))
         any/s)
        dont-care/s)
       L
       #:arithmetic-coercion-both)
      bad-input
      no-blame
      |wrap argmin|)
     argmin))))
(define (counterexample)
  (define test-result (concolic-test argmin #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input argmin witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (argmin test-property)))
(module+ main (counterexample))
