#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using map-foldr.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 map-foldr
 #:inputs
 (|•(0 (->s any/s any/s) (-> any/c any/c))|
  (->s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 (|•(1 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_foldr f z xs)
      (if (empty? xs) z (f (car xs) (_foldr f z (cdr xs)))))
    (define (_map f xs) (_foldr (λ (x ys) (cons (f x) ys)) empty xs))
    (define-id-with-ctc
     (-> (-> any/c any/c any/c) any/c (listof any/c) any/c)
     _foldr
     foldr
     bug
     bug)
    (define-id-with-ctc (-> (-> any/c any/c) any/c any/c) _map map bug bug)
    (map
     (apply-ctc
      (-> any/c any/c)
      (convert-it
       |•(0 (->s any/s any/s) (-> any/c any/c))|
       (->s any/s any/s)
       L)
      bad-input
      no-blame
      |argument of map|)
     (apply-ctc
      any/c
      (convert-it |•(1 any/s any/c)| any/s L)
      bad-input
      no-blame
      |argument of map|)))))
(define (counterexample)
  (define test-result (concolic-test map-foldr #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input map-foldr witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (map-foldr test-property)))
(module+ main (counterexample))
