#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using all.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 all
 #:inputs
 (|•(0 (->s any/s any/s) (-> any/c any/c))|
  (->s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 (|•(1 (list-of any/s) (listof any/c))|
  (list-of
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_all p? xs)
      (cond
       ((empty? xs) #t)
       ((empty? (cdr xs)) (p? (car xs)))
       (else (and (p? (car xs)) (_all p? (cdr xs))))))
    (define-id-with-ctc
     (-> (-> any/c any/c) (listof any/c) boolean?)
     _all
     all
     bug
     bug)
    (all
     (apply-ctc
      (-> any/c any/c)
      (convert-it
       |•(0 (->s any/s any/s) (-> any/c any/c))|
       (->s any/s any/s)
       L)
      bad-input
      no-blame
      |argument of all|)
     (apply-ctc
      (listof any/c)
      (convert-it |•(1 (list-of any/s) (listof any/c))| (list-of any/s) L)
      bad-input
      no-blame
      |argument of all|)))))
(define (counterexample)
  (define test-result (concolic-test all #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input all witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (all test-property)))
(module+ main (counterexample))
