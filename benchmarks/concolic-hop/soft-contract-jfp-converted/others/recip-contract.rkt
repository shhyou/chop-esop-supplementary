#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using recip-contract.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 recip-contract
 #:inputs
 (|•(0 integer number?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_recip x) (/ 1 x))
    (define-ctc non-zero/c (and/c number? (not/c zero?)))
    (define-id-with-ctc (-> number? non-zero/c) _recip recip bug bug)
    (recip
     (apply-ctc
      number?
      (convert-it |•(0 integer number?)| integer L)
      bad-input
      no-blame
      |argument of recip|)))))
(define (counterexample)
  (define test-result
    (concolic-test recip-contract #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input recip-contract witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (recip-contract test-property)))
(module+ main (counterexample))
