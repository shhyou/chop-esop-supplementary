#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using ho-opaque.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 ho-opaque
 #:inputs
 (|M(f f (->s integer integer) (-> zero? number?))| (->s integer integer))
 (|•(0 integer zero?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_db1 f) (λ (x) (f (f x))))
    (define-id-with-ctc
     (-> (-> zero? zero?) (-> zero? zero?))
     _db1
     db1
     bug
     bug)
    (define _f
      (convert-it
       |M(f f (->s integer integer) (-> zero? number?))|
       (->s integer integer)
       L))
    (define-id-with-ctc (-> zero? number?) _f f bad-input bug)
    ((db1 f)
     (apply-ctc
      zero?
      (convert-it |•(0 integer zero?)| integer L)
      bad-input
      no-blame
      |argument of (db1 f)|)))))
(define (counterexample)
  (define test-result (concolic-test ho-opaque #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input ho-opaque witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (ho-opaque test-property)))
(module+ main (counterexample))
