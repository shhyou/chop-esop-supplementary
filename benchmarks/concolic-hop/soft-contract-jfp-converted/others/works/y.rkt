#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using argmin.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it concolic-hop/complex)
(define-lump L)
(define-concolic-test
 argmin
 #:inputs
 (INPUT
  (->s
   (->s
    (->s
     boolean
     (list/s integer integer integer integer))
    (->s
     (list/s
      boolean
      (list-of
       boolean))
     boolean))
   boolean))
 #:prop
 (prop-not-exn
  (Î» ()
    (define ((argmin f) xs) (f (car xs)))
    ((convert-it
      INPUT
      (->s
       (->s
        (->s any/s (list/s integer integer integer integer))
        (->s (cons/s any/s (list-of any/s))
             any/s))
       dont-care/s)
      L)
     argmin))))
(define counterexample (vector (concretize-input argmin (concolic-test argmin #:all? #f)) (quote ())))
(provide counterexample)
