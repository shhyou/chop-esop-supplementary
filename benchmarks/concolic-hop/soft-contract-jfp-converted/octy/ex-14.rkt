#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using ex-14.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 ex-14
 #:inputs
 (|•(0 any/s any/c)|
  (or/s
   (->s integer integer)
   (list/s boolean (list-of integer))
   integer
   boolean))
 (|•(1 (cons/s any/s any/s) cons?)|
  (list/s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_f input extra)
      (cond
       ((and (number? input) (number? (car extra))) (+ input (car extra)))
       ((number? (car extra)) (+ (string-length input) (car extra)))
       (else 0)))
    (define-id-with-ctc (-> any/c cons? number?) _f f bug bug)
    (f
     (apply-ctc
      any/c
      (convert-it |•(0 any/s any/c)| any/s L)
      bad-input
      no-blame
      |argument of f|)
     (apply-ctc
      cons?
      (convert-it |•(1 (cons/s any/s any/s) cons?)| (cons/s any/s any/s) L)
      bad-input
      no-blame
      |argument of f|)))))
(define (counterexample)
  (define test-result (concolic-test ex-14 #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input ex-14 witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (ex-14 test-property)))
(module+ main (counterexample))
