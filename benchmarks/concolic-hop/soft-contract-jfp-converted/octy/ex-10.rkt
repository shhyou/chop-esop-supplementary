#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using ex-10.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 ex-10
 #:inputs
 (|•(0 (cons/s any/s any/s) cons?)|
  (list/s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_f p) (if (number? (cdr p)) (add1 (car p)) 7))
    (define-id-with-ctc (-> cons? number?) _f f bug bug)
    (f
     (apply-ctc
      cons?
      (convert-it |•(0 (cons/s any/s any/s) cons?)| (cons/s any/s any/s) L)
      bad-input
      no-blame
      |argument of f|)))))
(define (counterexample)
  (define test-result (concolic-test ex-10 #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input ex-10 witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (ex-10 test-property)))
(module+ main (counterexample))
