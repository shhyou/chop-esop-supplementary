#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using ex-01.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 ex-01
 #:inputs
 (|•(0 (->s (->s any/s integer) dont-care/s) (-> (-> any/c number?) dont-care/c))|
  (->s
   (->s
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean)
    integer)
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define (_f x) (if (number? x) 0 (add1 x)))
    (define-id-with-ctc (-> any/c number?) _f f bug bug)
    ((apply-ctc
      (-> (-> any/c number?) dont-care/c)
      (convert-it
       |•(0 (->s (->s any/s integer) dont-care/s) (-> (-> any/c number?) dont-care/c))|
       (->s (->s any/s integer) dont-care/s)
       L)
      bad-input
      no-blame
      |wrap f|)
     f))))
(define (counterexample)
  (define test-result (concolic-test ex-01 #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input ex-01 witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (ex-01 test-property)))
(module+ main (counterexample))
