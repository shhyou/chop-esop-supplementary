#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using ex-11.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L (0 'x) (1 'y) (2 'z))
(define-concolic-test
 ex-11
 #:inputs
 (|M(g g (->s (cons/s integer integer) lump/s) (-> (cons/c number? number?) symbol?))|
  (->s (list/s integer integer) integer))
 (|•(0 (cons/s any/s any/s) cons?)|
  (list/s
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)
   (or/s
    (->s integer integer)
    (list/s boolean (list-of integer))
    integer
    boolean)))
 #:prop
 (prop-not-exn
  (λ ()
    (define _g
      (convert-it
       |M(g g (->s (cons/s integer integer) lump/s) (-> (cons/c number? number?) symbol?))|
       (->s (cons/s integer integer) lump/s)
       L))
    (define-id-with-ctc
     (-> (cons/c number? number?) symbol?)
     _g
     g
     bad-input
     bug)
    (define (_f p) (if (and (number? (car p)) (number? (car p))) (g p) 'no))
    (define-id-with-ctc (-> cons? symbol?) _f f bug bug)
    (f
     (apply-ctc
      cons?
      (convert-it |•(0 (cons/s any/s any/s) cons?)| (cons/s any/s any/s) L)
      bad-input
      no-blame
      |argument of f|)))))
(define (counterexample)
  (define test-result (concolic-test ex-11 #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input ex-11 witness)
   '('x 'y 'z)
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (ex-11 test-property)))
(module+ main (counterexample))
