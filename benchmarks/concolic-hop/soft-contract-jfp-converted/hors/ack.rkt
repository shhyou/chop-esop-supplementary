#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using ack.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 ack
 #:inputs
 (|•(0 integer integer?)| integer)
 (|•(1 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_ack m n)
      (cond
       ((= m 0) (+ n 1))
       ((= n 0) (_ack (- m 1) 1))
       (else (_ack (- m 1) (_ack m (- n 1))))))
    (define-id-with-ctc
     (-> integer? integer? (and/c integer? (>/c 1)))
     _ack
     ack
     bug
     bug)
    (ack
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of ack|)
     (apply-ctc
      integer?
      (convert-it |•(1 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of ack|)))))
(define (counterexample)
  (define test-result (concolic-test ack #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input ack witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (ack test-property)))
(module+ main (counterexample))
