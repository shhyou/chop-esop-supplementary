#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using zip.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 zip
 #:inputs
 (Amb integer)
 (|B(0 main zip (->s (->s integer (list-of any/s)) dont-care/s) (-> (-> integer? (listof any/c)) dont-care/c))|
  (->s
   (->s
    integer
    (list-of
     (or/s
      (->s integer integer)
      (list/s boolean (list-of integer))
      integer
      boolean)))
   boolean))
 #:prop
 (prop-not-exn
  (Î» ()
    (define (_zip xs ys)
      (cond
       ((empty? xs) (cond ((empty? ys) (list)) (else 'fail)))
       (else
        (cond
         ((empty? ys) (cons (cons (car xs) (car ys)) (_zip (cdr xs) (cdr ys))))
         (else 'fail)))))
    (define (_make-list n)
      (cond ((< n 0) (list)) (else (cons n (_make-list (- n 1))))))
    (define (_main n) (let ((xs (_make-list n))) (_zip xs xs)))
    (define-id-with-ctc (-> integer? (listof any/c)) _main main bug bug)
    (cond
     (else
      ((apply-ctc
        (-> (-> integer? (listof any/c)) dont-care/c)
        (convert-it
         |B(0 main zip (->s (->s integer (list-of any/s)) dont-care/s) (-> (-> integer? (listof any/c)) dont-care/c))|
         (->s (->s integer (list-of any/s)) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap main|)
       main))))))
(define (counterexample)
  (define test-result (concolic-test zip #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input zip witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (zip test-property)))
(module+ main (counterexample))
