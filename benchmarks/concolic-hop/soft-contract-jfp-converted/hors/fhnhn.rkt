#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using fhnhn.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 fhnhn
 #:inputs
 (Amb integer)
 (|B(0 g g (->s (->s (->s (->s any/s integer) (->s (->s any/s integer) integer)) integer integer) dont-care/s) (-> (-> f-spec integer? integer?) dont-care/c))|
  (->s
   (->s
    (->s
     (->s
      (or/s
       (->s integer integer)
       (list/s boolean (list-of integer))
       integer
       boolean)
      integer)
     (->s
      (->s
       (or/s
        (->s integer integer)
        (list/s boolean (list-of integer))
        integer
        boolean)
       integer)
      integer))
    (->s integer integer))
   boolean))
 (|B(1 h h (->s (->s integer (->s any/s integer)) dont-care/s) (-> (-> integer? (-> any/c integer?)) dont-care/c))|
  (->s
   (->s
    integer
    (->s
     (or/s
      (->s integer integer)
      (list/s boolean (list-of integer))
      integer
      boolean)
     integer))
   boolean))
 (|B(2 main main (->s (->s (->s (->s any/s integer) (->s (->s any/s integer) integer)) integer integer) dont-care/s) (-> (-> f-spec integer? integer?) dont-care/c))|
  (->s
   (->s
    (->s
     (->s
      (or/s
       (->s integer integer)
       (list/s boolean (list-of integer))
       integer
       boolean)
      integer)
     (->s
      (->s
       (or/s
        (->s integer integer)
        (list/s boolean (list-of integer))
        integer
        boolean)
       integer)
      integer))
    (->s integer integer))
   boolean))
 #:prop
 (prop-not-exn
  (λ ()
    (define-ctc
     f-spec
     (->i
      ((x (-> any/c integer?)))
      (res
       (x)
       (->
        (and/c
         (-> any/c integer?)
         (λ (y) (not (and (< (x #f) 0) (< (y #f) 0)))))
        integer?))))
    (define (_h x) (λ (_) x))
    (define-id-with-ctc (-> integer? (-> any/c integer?)) _h h bug bug)
    (define (_g f n) ((f (h n)) (h n)))
    (define-id-with-ctc (-> f-spec integer? integer?) _g g bug bug)
    (define (_main f m) (g f m))
    (define-id-with-ctc (-> f-spec integer? integer?) _main main bug bug)
    (cond
     ((= Amb 0)
      ((apply-ctc
        (-> (-> f-spec integer? integer?) dont-care/c)
        (convert-it
         |B(0 g g (->s (->s (->s (->s any/s integer) (->s (->s any/s integer) integer)) integer integer) dont-care/s) (-> (-> f-spec integer? integer?) dont-care/c))|
         (->s
          (->s
           (->s (->s any/s integer) (->s (->s any/s integer) integer))
           integer
           integer)
          dont-care/s)
         L)
        bad-input
        no-blame
        |wrap g|)
       g))
     ((= Amb 1)
      ((apply-ctc
        (-> (-> integer? (-> any/c integer?)) dont-care/c)
        (convert-it
         |B(1 h h (->s (->s integer (->s any/s integer)) dont-care/s) (-> (-> integer? (-> any/c integer?)) dont-care/c))|
         (->s (->s integer (->s any/s integer)) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap h|)
       h))
     (else
      ((apply-ctc
        (-> (-> f-spec integer? integer?) dont-care/c)
        (convert-it
         |B(2 main main (->s (->s (->s (->s any/s integer) (->s (->s any/s integer) integer)) integer integer) dont-care/s) (-> (-> f-spec integer? integer?) dont-care/c))|
         (->s
          (->s
           (->s (->s any/s integer) (->s (->s any/s integer) integer))
           integer
           integer)
          dont-care/s)
         L)
        bad-input
        no-blame
        |wrap main|)
       main))))))
(define (counterexample)
  (define test-result (concolic-test fhnhn #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input fhnhn witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (fhnhn test-property)))
(module+ main (counterexample))
