#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using repeat.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 repeat
 #:inputs
 (Amb integer)
 (|B(0 main repeat (->s (->s integer any/s) dont-care/s) (-> (-> integer? (not/c false?)) dont-care/c))|
  (->s
   (->s
    integer
    (or/s
     (->s integer integer)
     (list/s boolean (list-of integer))
     integer
     boolean))
   boolean))
 #:prop
 (prop-not-exn
  (Î» ()
    (define (_succ x) (+ x 1))
    (define (_repeat f n s) (if (= n 0) s (f (_repeat f (- n 1) s))))
    (define (_main n) (> (_repeat _succ n 0) n))
    (define-id-with-ctc (-> integer? (not/c false?)) _main main bug bug)
    (cond
     (else
      ((apply-ctc
        (-> (-> integer? (not/c false?)) dont-care/c)
        (convert-it
         |B(0 main repeat (->s (->s integer any/s) dont-care/s) (-> (-> integer? (not/c false?)) dont-care/c))|
         (->s (->s integer any/s) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap main|)
       main))))))
(define (counterexample)
  (define test-result (concolic-test repeat #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input repeat witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (repeat test-property)))
(module+ main (counterexample))
