#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using l-zipmap.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 l-zipmap
 #:inputs
 (Amb integer)
 (|B(0 main main (->s (->s integer integer) dont-care/s) (-> (->i ((n integer?)) (res (n) (and/c integer? (=/c n)))) dont-care/c))|
  (->s (->s integer integer) boolean))
 (|B(1 map map (->s (->s integer integer) dont-care/s) (-> (-> integer? integer?) dont-care/c))|
  (->s (->s integer integer) boolean))
 (|B(2 zip zip (->s (->s integer integer integer) dont-care/s) (-> (-> integer? integer? integer?) dont-care/c))|
  (->s (->s integer (->s integer integer)) boolean))
 #:prop
 (prop-not-exn
  (Î» ()
    (define (_zip x y)
      (cond
       ((and (= x 0) (= y 0)) x)
       ((and (not (= x 0)) (not (= y 0))) (+ 1 (_zip (- x 1) (- y 1))))
       (else 'fail)))
    (define-id-with-ctc (-> integer? integer? integer?) _zip zip bug bug)
    (define (_map x) (if (= x 0) x (+ 1 (_map (- x 1)))))
    (define-id-with-ctc (-> integer? integer?) _map map bug bug)
    (define (_main n) (map (zip n n)))
    (define-id-with-ctc
     (->i ((n integer?)) (res (n) (and/c integer? (=/c n))))
     _main
     main
     bug
     bug)
    (cond
     ((= Amb 0)
      ((apply-ctc
        (->
         (->i ((n integer?)) (res (n) (and/c integer? (=/c n))))
         dont-care/c)
        (convert-it
         |B(0 main main (->s (->s integer integer) dont-care/s) (-> (->i ((n integer?)) (res (n) (and/c integer? (=/c n)))) dont-care/c))|
         (->s (->s integer integer) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap main|)
       main))
     ((= Amb 1)
      ((apply-ctc
        (-> (-> integer? integer?) dont-care/c)
        (convert-it
         |B(1 map map (->s (->s integer integer) dont-care/s) (-> (-> integer? integer?) dont-care/c))|
         (->s (->s integer integer) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap map|)
       map))
     (else
      ((apply-ctc
        (-> (-> integer? integer? integer?) dont-care/c)
        (convert-it
         |B(2 zip zip (->s (->s integer integer integer) dont-care/s) (-> (-> integer? integer? integer?) dont-care/c))|
         (->s (->s integer integer integer) dont-care/s)
         L)
        bad-input
        no-blame
        |wrap zip|)
       zip))))))
(define (counterexample)
  (define test-result
    (concolic-test
     l-zipmap
     #:all?
     #f
     #:path-limit
     500
     #:timeout
     5
     #:statistics?
     #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input l-zipmap witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (l-zipmap test-property)))
(module+ main (counterexample))
