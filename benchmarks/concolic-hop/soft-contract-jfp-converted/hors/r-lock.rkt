#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using r-lock.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 r-lock
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_lock st) 1)
    (define (_unlock st) 0)
    (define-id-with-ctc (-> (one-of/c 0) (one-of/c 1)) _lock lock bug bug)
    (define-id-with-ctc (-> (one-of/c 1) (one-of/c 0)) _unlock unlock bug bug)
    (define (_f n st) (if (> n 0) (lock st) st))
    (define (_g n st) (if (>= n 0) (unlock st) st))
    (define-id-with-ctc (-> integer? integer? integer?) _f f bug bug)
    (define-id-with-ctc (-> integer? integer? integer?) _g g bug bug)
    (define (_main n) (g n (f n 0)))
    (define-id-with-ctc (-> integer? (one-of/c 0)) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test r-lock #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input r-lock witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (r-lock test-property)))
(module+ main (counterexample))
