#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using intro3.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 intro3
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_f x g) (g x))
    (define-id-with-ctc (-> integer? (-> integer? any/c) any/c) _f f bug bug)
    (define (_h z) (λ (y) 'unit))
    (define-id-with-ctc
     (->i ((z integer?)) (res (z) (-> (and/c integer? (>/c z)) any/c)))
     _h
     h
     bug
     bug)
    (define (_main n) (if (> n 0) (f n (h n)) 'unit))
    (define-id-with-ctc (-> integer? any/c) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test intro3 #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input intro3 witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (intro3 test-property)))
(module+ main (counterexample))
