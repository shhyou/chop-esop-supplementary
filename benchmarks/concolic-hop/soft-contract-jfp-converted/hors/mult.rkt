#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using mult.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 mult
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_mult n m) (if (or (<= n 0) (<= m 0)) 0 (+ n (_mult n (- m 1)))))
    (define (_sqr n) (_mult n n))
    (define-id-with-ctc
     (-> integer? integer? (and/c integer? (>=/c 0)))
     _mult
     mult
     bug
     bug)
    (define-id-with-ctc
     (->i ((n integer?)) (res (n) (and/c integer? (>=/c (+ n 1)))))
     _sqr
     sqr
     bug
     bug)
    (sqr
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of sqr|)))))
(define (counterexample)
  (define test-result (concolic-test mult #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input mult witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (mult test-property)))
(module+ main (counterexample))
