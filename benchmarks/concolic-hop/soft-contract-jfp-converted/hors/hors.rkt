#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using hors.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 hors
 #:inputs
 (|•(0 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_c _) 'unit)
    (define-id-with-ctc (-> integer? any/c) _c c bug bug)
    (define (_b x _) (x 1))
    (define-id-with-ctc (-> (-> integer? any/c) integer? any/c) _b b bug bug)
    (define (_a x y q) (begin (x 0) (y 0)))
    (define-id-with-ctc
     (-> (-> integer? any/c) (-> integer? any/c) zero? any/c)
     _a
     a
     bug
     bug)
    (define (_f n x q)
      (if (<= n 0) (x q) (a x (λ (p) (_f (- n 1) (λ (_) (b x _)) p)) q)))
    (define-id-with-ctc
     (-> integer? (-> integer? any/c) integer? any/c)
     _f
     f
     bug
     bug)
    (define (_s n q) (f n c q))
    (define-id-with-ctc (-> integer? integer? any/c) _s s bug bug)
    (define (_main n) (s n n))
    (define-id-with-ctc (-> integer? any/c) _main main bug bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test hors #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input hors witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (hors test-property)))
(module+ main (counterexample))
