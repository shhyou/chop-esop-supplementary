#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using max.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 max
 #:inputs
 (|•(0 integer integer?)| integer)
 (|•(1 integer integer?)| integer)
 (|•(2 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_max max2 x y z) (max2 y z))
    (define-id-with-ctc
     (-> (-> integer? integer? integer?) integer? integer? integer? integer?)
     _max
     max
     bug
     bug)
    (define (_f x y) (if (>= x y) x y))
    (define-id-with-ctc (-> integer? integer? integer?) _f f bug bug)
    (define (_main x y z) (max f x y z))
    (define-id-with-ctc
     (->i
      ((x integer?) (y integer?) (z integer?))
      (res (x y z) (and/c integer? (λ (m) (= (f x m) m)))))
     _main
     main
     bug
     bug)
    (main
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)
     (apply-ctc
      integer?
      (convert-it |•(1 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)
     (apply-ctc
      integer?
      (convert-it |•(2 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of main|)))))
(define (counterexample)
  (define test-result (concolic-test max #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input max witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (max test-property)))
(module+ main (counterexample))
