#lang concolic-hop/lang
;; this file generated by convert-soft-contract.rkt using mem.sch as input
(require concolic-hop/ctc concolic-hop/lib concolic-hop/convert-it)
(define-lump L)
(define-concolic-test
 mem
 #:inputs
 (|•(0 integer integer?)| integer)
 (|•(1 integer integer?)| integer)
 #:prop
 (prop-not-exn
  (λ ()
    (define (_mk-list n x)
      (if (< n 0) empty (cons (- x 1) (_mk-list (- n 1) x))))
    (define (_mem x xs)
      (if (empty? xs) #f (or (= x (car xs)) (_mem x (cdr xs)))))
    (define-id-with-ctc
     (->i
      ((_ integer?) (x integer?))
      (res (_ x) (and/c (listof integer?) (λ (l) (or (empty? l) (mem x l))))))
     _mk-list
     mk-list
     bug
     bug)
    (define-id-with-ctc
     (-> integer? (listof integer?) boolean?)
     _mem
     mem
     bug
     bug)
    (mk-list
     (apply-ctc
      integer?
      (convert-it |•(0 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of mk-list|)
     (apply-ctc
      integer?
      (convert-it |•(1 integer integer?)| integer L)
      bad-input
      no-blame
      |argument of mk-list|)))))
(define (counterexample)
  (define test-result (concolic-test mem #:all? #f #:statistics? #t))
  (define witness (list-ref test-result 0))
  (define stats (list-ref test-result 1))
  (vector
   (concretize-input mem witness)
   '()
   `#hash((solve-count . ,(concolic-statistics-solve-count stats))
          (solve-real-nongc-time
           .
           ,(concolic-statistics-solve-real-nongc-time stats))
          (test-count . ,(concolic-statistics-test-count stats)))))
(provide counterexample (rename-out (mem test-property)))
(module+ main (counterexample))
